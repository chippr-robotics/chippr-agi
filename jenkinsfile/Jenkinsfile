
def configuration = [vaultUrl: 'http://192.168.1.135:8200', 
                        vaultCredentialId: 'gh-vault', 
                        engineVersion: 2]
def secrets = [ 
  [path: 'secret/COMMON', engineVersion: 2, secretValues: [ 
    [envVar: 'GIT_CRED', vaultKey: 'GIT_CRED'], 
    [envVar: 'GIT_URL', vaultKey: 'GIT_URL'], 
    [envVar: 'SERVER_URL', vaultKey: 'SERVER_URL'],
    [envVar: 'DOCKERHUB_USERNAME', vaultKey: 'DOCKERHUB_USERNAME'], 
    [envVar: 'DOCKERHUB_PASSWORD', vaultKey: 'DOCKERHUB_PASSWORD'], 
    [envVar: 'DOCKERHUB_REPO', vaultKey: 'DOCKERHUB_REPO'],  
    ]],
  [path: 'secret/CHIPPRAGI', engineVersion: 2, secretValues: [ 
    [envVar: 'VECTOR_DATA', vaultKey: 'VECTOR_DATA'],
    [envVar: 'VECTOR_IMAGE', vaultKey: 'VECTOR_IMAGE'],
    [envVar: 'CHIPPRAGI_IMAGE', vaultKey: 'CHIPPRAGI_IMAGE'],
    [envVar: 'MSG_BUS', vaultKey: 'MSG_BUS'],
    [envVar: 'AGENT_ID', vaultKey: 'AGENT_ID'],
    [envVar: 'INDEX_NAME', vaultKey: 'INDEX_NAME'],
    [envVar: 'REDIS_URL', vaultKey: 'REDIS_URL'], 
    [envVar: 'OPENAI_API_KEY', vaultKey: 'OPENAI_API_KEY'], 
    [envVar: 'MODEL', vaultKey: 'MODEL'], 
    [envVar: 'DEFAULT_TEMP', vaultKey: 'DEFAULT_TEMP'], 
    [envVar: 'MAX_TOKEN_LENGTH', vaultKey: 'MAX_TOKEN_LENGTH'], 
    [envVar: 'MATCH_LENGTH', vaultKey: 'MATCH_LENGTH'], 
    [envVar: 'OBJECTIVE', vaultKey: 'OBJECTIVE'], 
    ]]
]
pipeline {
  agent any

    stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }

    stage('Run NPM Tests') {
      steps {
        sh 'npm install'
        sh 'npm test'
      }
    }

    stage('Publish NPM Package') {
      steps {
        withCredentials([usernamePassword(credentialsId: 'npm-credentials', usernameVariable: 'NPM_USERNAME', passwordVariable: 'NPM_PASSWORD')]) {
          sh 'npm login --registry=https://registry.npmjs.org --scope=@your_scope --username=$NPM_USERNAME --password=$NPM_PASSWORD --email=your_email@example.com'
          sh 'npm publish'
        }
      }
    }

    stage('Build Docker Image') {
      steps {
        sh 'docker build -t chipprbots/${CHIPPRAGI_IMAGE}:latest .'
      }
    }

    stage('Push Docker Image') {
      steps {
        withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', usernameVariable: 'DH_USER', passwordVariable: 'DH_PASS')]) {
          sh 'docker login -u $DH_USER -p $DH_PASS'
          sh 'docker push chipprbots/${CHIPPRAGI_IMAGE}:latest'
        }
      }
    }

    stage('Run Docker Compose') {
      steps {
        sh 'echo '
      }
    }
  }
}
